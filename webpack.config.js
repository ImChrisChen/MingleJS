const path = require('path');const MiniCssExtractPlugin = require('mini-css-extract-plugin');const webpack = require('webpack');const typingsForCssModulesLoaderConf = {    loader: 'typings-for-css-modules-loader',    options: {        modules: true,        namedExport: true,        camelCase: true,        sass: true,    },};module.exports = {    mode: 'development',    entry: './main.ts',    output: {        path: path.resolve(__dirname, 'dist'),        filename: './main.js',        publicPath: '/assets/',        libraryTarget: 'umd',    },    resolve: {        extensions: ['.ts', '.tsx', '.js', '.json'],    },    module: {        rules: [            {                test: /\.css$/,                use: [                    { loader: 'style-loader' },                    { loader: 'css-loader' },                ],            },            {                test: /\.less$/,                use: [                    { loader: 'style-loader' },                    { loader: 'css-loader' },                    { loader: 'less-loader' },                ],            },            {                test: /\.scss$/,                rules: [                    {                        use: [                            'style-loader',                            typingsForCssModulesLoaderConf,                        ],                    },                ],            },            {                test: /\.tsx?$/,                use: {                    // loader: 'ts-loader',                    loader: 'awesome-typescript-loader',                },            },            { enforce: 'pre', test: /\.js$/, loader: 'source-map-loader' },            {                test: /\.jsx?$/,                use: {                    loader: 'babel-loader',                },            },        ],    },    externals: {        // 忽略打包('直接在Html中引入了，减少打包速度')        // 'react': 'React',        // 'react-dom': 'ReactDOM',    },    plugins: [        new MiniCssExtractPlugin({            // Options similar to the same options in webpackOptions.output            // both options are optional            filename: '[name].[contenthash].css',            disable: process.env.NODE_ENV === 'development',            chunkFilename: '[id].css',        }),        new webpack.WatchIgnorePlugin([/css\.d\.ts$/]),    ],};