/** * Created by WebStorm. * User: chrischen * Date: 2020/9/19 * Time: 11:23 上午 */import { ElementDataAttrs } from '@interface/ElAttrs';function isBool(v) {    return typeof v === 'boolean';}function isObject(v) {    return typeof v === 'object' && v.constructor === Object;}function isEmptyObject(v) {    return JSON.stringify(v) === '{}';}function isEmptyArray(v) {    return JSON.stringify(v) === '[]';}enum KeyMap {    multi = 'multi',    options = 'options'}export function parseTpl(tpl: string): String {    let fields: Array<string> = getTplFields(tpl);    fields.forEach(field => {        let input = document.querySelector(`input[name=${ field }]`);        tpl = tpl.replace(/<{(.*?)}>/g, input ? input['value'] : '');      // 将模版替换为指定的值    });    return tpl;}export function getTplFields(tpl: string): Array<string> {    let matchArr: Array<string> = tpl.match(/<{(.*?)}>/g) ?? [];    return matchArr.map(item => {        let [ , inputname ] = item.match(/<{(.*?)}>/) ?? [];        return inputname;    });}export function parseDataAttr(dataAttrs: ElementDataAttrs) {    let isParseTplAttr = true;    // TODO 这里需要深拷贝处理一下，值和DOM元素是引用关系(避免破坏传入的参数，造成不必要的影响)    let dataset = JSON.parse(JSON.stringify(dataAttrs));    for(const key in dataset) {        if(!dataset.hasOwnProperty(key)) continue;        let val = dataset[key];        if(isParseTplAttr) {            if(typeof val !== 'string') continue;            dataset[key] = parseTpl(val);        }        if(key === KeyMap.multi && !isBool(val)) {            dataset[key] = eval(val);        } else if(key === KeyMap.options && !isObject(val)) {            let ret = /({.*?}|\[.*?\])/.test(val);            if(!ret) {                console.error(`data-${ key }的值传入的不是一个JSON`);                dataset[key] = {};                continue;            }            dataset[key] = JSON.parse(val);        } else {        }    }    return dataset;}