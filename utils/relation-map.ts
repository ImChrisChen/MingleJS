/** * Created by WebStorm. * User: MacBook * Date: 2020/9/16 * Time: 7:56 下午 */interface esModule {    default: any,    __esModule: boolean}function deep(keys, object) {    let key = keys[0];    if(!object[key]) {        return false;    }    if(object[key]['default']) {        return object[key];         // 找到模块直接 return 出去    } else {        keys.shift();           // 删除第一项        return deep(keys, object[key]);    }}// TODO 后续可优化成读取目录的形式，不过感觉要配合 命令行生成目录会比较好export async function getComponent(keys: string) {    keys = keys.toLowerCase();    const ComponentMap: object = {        form  : {            select    : await import('@component/form/select/select'),            selecttree: await import('@component/form/select/tree/tree'),            datepicker: await import('@component/form/datepicker/datepicker'),        },        view  : {            popover : await import('@component/view/popover/popover'),            dropdown: await import('@component/view/dropdown/dropdown'),        },        data  : {            table    : await import('@component/data/table/table'),            chartline: await import('@component/data/chart/line/line'),        },        tips  : {            loading: await import('@component/tips/loading/loading'),        },        // functional: {        //     backtop: await import('@component/functional/backtop/BackTop')        // },        layout: {            menu: await import('@component/layout/menu/menu'),        },    };    // let esModule = keys.split('-').reduce((target: object, key) => {    //     return target[key];    // }, ComponentMap);    let esModule = deep(keys.split('-'), ComponentMap);    if(!esModule) {        console.error(`没有${ keys }这个组件`);        return false;    }    return esModule['default'];}