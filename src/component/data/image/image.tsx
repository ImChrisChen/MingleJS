/** * Created by WebStorm. * User: MacBook * Date: 2020/10/27 * Time: 6:31 下午 */import { IComponentProps } from '@interface/common/component';import React from 'react';import { jsonp } from '@utils/request/request';import { Area, Axis, Chart, Coordinate, Interval, Line, Point } from 'bizcharts';import { Spin } from 'antd';import FormAjax from '@component/form/ajax/form';import { formatObject2Url } from '@utils/format-data';import { DataSet } from '@antv/data-set/lib/data-set';// import areaUser from '@root/mock/chart/areaUser.json';const { DataView } = DataSet;// 数据源const data = [    {        month: 'Jan',        city : 'Tokyo',        value: 7,    },    {        month: 'Jan',        city : 'London',        value: 3.9,    },    {        month: 'Feb',        city : 'Tokyo',        value: 6.9,    },    {        month: 'Feb',        city : 'London',        value: 4.2,    },    {        month: 'Mar',        city : 'Tokyo',        value: 9.5,    },    {        month: 'Mar',        city : 'London',        value: 5.7,    },    {        month: 'Apr',        city : 'Tokyo',        value: 14.5,    },    {        month: 'Apr',        city : 'London',        value: 8.5,    },    {        month: 'May',        city : 'Tokyo',        value: 18.4,    },    {        month: 'May',        city : 'London',        value: 11.9,    },    {        month: 'Jun',        city : 'Tokyo',        value: 21.5,    },    {        month: 'Jun',        city : 'London',        value: 15.2,    },    {        month: 'Jul',        city : 'Tokyo',        value: 25.2,    },    {        month: 'Jul',        city : 'London',        value: 17,    },    {        month: 'Aug',        city : 'Tokyo',        value: 26.5,    },    {        month: 'Aug',        city : 'London',        value: 16.6,    },    {        month: 'Sep',        city : 'Tokyo',        value: 23.3,    },    {        month: 'Sep',        city : 'London',        value: 14.2,    },    {        month: 'Oct',        city : 'Tokyo',        value: 18.3,    },    {        month: 'Oct',        city : 'London',        value: 10.3,    },    {        month: 'Nov',        city : 'Tokyo',        value: 13.9,    },    {        month: 'Nov',        city : 'London',        value: 6.6,    },    {        month: 'Dec',        city : 'Tokyo',        value: 9.6,    },    {        month: 'Dec',        city : 'London',        value: 4.8,    },];const pieData = [    { item: '事例一', percent: 0.4 },    { item: '事例二', percent: 0.21 },    { item: '事例三', percent: 0.17 },    { item: '事例四', percent: 0.13 },    { item: '事例五', percent: 0.09 },];const cols = {    percent: {        formatter: val => {            val = val * 100 + '%';            return val;        },    },};export default class DataImage extends React.Component<IComponentProps, any> {    state = {        loading: true,        data   : [],    };    constructor(props) {        super(props);        if (this.props.dataset && this.props.dataset.from) {            let formElement = FormAjax.findFormElement(this.props.dataset.from);            FormAjax.onFormSubmit(formElement, this.handleFormSubmit.bind(this));        }        this.getData().then(data => {            console.log(data);            this.setState({ data, loading: false });        });    }    async handleFormSubmit(formData) {        this.setState({            loading: true,        });        let url = formatObject2Url(formData, this.props.dataset.url);        let res = await jsonp(url);        if (res.status) {            this.setState({ data: res.data, loading: false });        }    }    async getData() {        let res = await jsonp(this.props.dataset.url);        // return data;        return res.status ? res.data : [];    }    pie(config) {        let genreCount = Array.from(new Set(this.state.data.map(item => item[config.genre]).filter(item => item))).length;        if (genreCount > 32) {            console.warn(`为了保持更好的用户体验，「${ config.genreName }」此图表不建议用饼图展示`);        }        return <>            <Chart height={ config.height } data={ this.state.data || pieData } scale={ cols } autoFit                   interactions={ [ 'element-single-selected' ] }>                <Coordinate type="theta" radius={ 0.75 }/>                {/*<Tooltip showTitle={ false }/>*/ }                <Axis visible={ false }/>                <Interval                    position={ config.value }                    adjust="stack"                    color={ config.genre }                    label={                        [ '*', {                            content: (data) => {                                return `${ data[config.genre] }: ${ data[config.value] }`;                            },                        } ] }                />            </Chart>        </>;    }    bar(config) {        // const dv = new DataView().source(this.state.data);        // dv.transform({        //     type  : 'fold',        //     fields: [ config.value ],        // });        return <>            <h2 style={ { textAlign: 'center', padding: '10px 20px' } }>{ config.genreName }用户画像</h2>            <Spin spinning={ this.state.loading } tip="loading...">                <Chart height={ config.height } padding="auto" data={ this.state.data } autoFit                       interactions={ [ 'active-region' ] }                >                    <Interval position={ config.position } color={ config.colors }/>                    {/*<Line position={ position }/>*/ }                    {/*<Point position={ position }/>*/ }                    {/*<Tooltip shared/>*/ }                </Chart>            </Spin>        </>;    }    // 雷达图 https://pic1.zhimg.com/v2-f39a4d5347f1e9b315b78f295249e979_r.jpg?source=1940ef5c    polar(config) {        let dv = new DataView().source(this.state.data);        console.log(dv);        dv.transform({            type  : 'fold',            fields: [ config.genre ],            key   : 'user',            value : 'score',        });        console.log(dv);        return <Chart            height={ config.height }            data={ dv.rows }            autoFit            scale={ {                score: {                    min: 0,                    max: Infinity,                },            } }            interactions={ [ 'legend-highlight' ] }        >            <Coordinate type="polar" radius={ 0.8 }/>            {/*<Tooltip shared />*/ }            <Point                position={ config.genre + '*sorce' }                color={ 'user' }                shape="circle"            />            <Line                position={ config.genre + '*sorce' }                color={ 'user' }                size="2"            />            <Area                position={ config.genre + '*sorce' }                color={ 'user' }            />        </Chart>;    }    formatConfig() {        console.log(this.props.dataset);        let {            xaxis: genre,            series,            size,            colors,            title,        } = this.props.dataset;        let value = series[0][0];        let genreName = series[0][1];       // 地区        let chartType = series[0][2];        return {            genre,           // 'location' (地区)            value,           // 'count'  (数量)            position: `${ genre }*${ value }`,            colors  : colors,            genreName,       // `按照${genreName('地区')}统计的维度`            title,            height  : size.height,            chartType,        };    }    render() {        let config = this.formatConfig();        return <>            { this[config.chartType](config) }        </>;    }}