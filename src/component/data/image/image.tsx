/** * Created by WebStorm. * User: MacBook * Date: 2020/10/27 * Time: 6:31 下午 */import { IComponentProps } from '@interface/common/component';import React from 'react';import { jsonp } from '@utils/request/request';import { Axis, Chart, Coordinate, Interval, Legend, LineAdvance, Tooltip } from 'bizcharts';import { Spin } from 'antd';import FormAjax from '@component/form/ajax/form';import { formatObject2Url } from '@utils/format-data';// import { DataSet } from '@antv/data-set/lib/data-set';// import areaUser from '@root/mock/chart/areaUser.json';// const { DataView } = DataSet;const cols = {    percent: {        formatter: val => {            val = val * 100 + '%';            return val;        },    },};export default class DataImage extends React.Component<IComponentProps, any> {    state = {        loading: true,        data   : [],    };    constructor(props) {        super(props);        if (this.props.dataset && this.props.dataset.from) {            let formElement = FormAjax.findFormElement(this.props.dataset.from);            FormAjax.onFormSubmit(formElement, this.handleFormSubmit.bind(this));        }        this.getData().then(data => {            console.log(data);            this.setState({ data, loading: false });        });    }    async handleFormSubmit(formData) {        this.setState({            loading: true,        });        let url = formatObject2Url(formData, this.props.dataset.url);        let res = await jsonp(url);        if (res.status) {            this.setState({ data: res.data, loading: false });        }    }    async getData() {        let res = await jsonp(this.props.dataset.url);        return res.status ? res.data : [];    }    pie(config) {        let genreCount = Array.from(new Set(this.state.data.map(item => item[config.genre]).filter(item => item))).length;        if (genreCount > 32) {            console.warn(`为了保持更好的用户体验，「${ config.genreName }」此图表不建议用饼图展示`);        }        return <>            <Chart height={ config.height } data={ this.state.data } scale={ cols } autoFit                   interactions={ [ 'element-single-selected' ] }>                <Coordinate type="theta" radius={ 0.75 }/>                {/*<Tooltip showTitle={ false }/>*/ }                <Axis visible={ false }/>                <Interval                    position={ config.compare }                    adjust="stack"                    color={ config.genre }                    label={                        [ '*', {                            content: (data) => {                                return `${ data[config.genre] }: ${ data[config.compare] }`;                            },                        } ] }                />            </Chart>        </>;    }    bar(config) {        let { position, category, colors } = config;        return <>            <Spin spinning={ this.state.loading } tip="loading...">                <Chart height={ config.height } padding="auto" data={ this.state.data } autoFit                       interactions={ [ 'active-region' ] }>                    <Interval position={ position } color={ category || colors }                              adjust={ [ { type: 'dodge', marginRatio: 0 } ] }/>                    <Tooltip shared/>                    <Legend layout="vertical" position="top-left"                            itemName={ {                                spacing  : 10, // 文本同滑轨的距离                                style    : {                                    // stroke: 'blue',                                    fill: 'red',                                },                                formatter: (text, item, index) => {                                    console.log('text', text, item);                                    return text === 'Berlin' ? 'Berlin【重点关注】' : text;                                },                            } }                    />                </Chart>            </Spin>        </>;    }    line(config) {        let { position, category, colors, chartType } = config;        /*        * TODO line 单独配置        * area 是否展示区域        * point 是否展示点        **/        return <>            <Spin spinning={ this.state.loading } tip="loading...">                <Chart height={ config.height } padding="auto" data={ this.state.data } autoFit                       interactions={ [ 'active-region' ] }>                    {/*<Line position={ position } color={ category || colors }/>*/ }                    {/*<Point position={ position } color={ category || colors }/>*/ }                    <LineAdvance area shape="smooth" position={ position } point={ true }                                 color={ category || colors } label="first"/>                    <Tooltip shared/>                    <Legend layout="vertical" position="top-left"                            itemName={ {                                spacing  : 10, // 文本同滑轨的距离                                style    : {                                    // stroke: 'blue',                                    fill: 'red',                                },                                formatter: (text, item, index) => {                                    console.log('text', text, item);                                    return text === 'Berlin' ? 'Berlin【重点关注】' : text;                                },                            } }                    />                </Chart>            </Spin>        </>;    }    // 雷达图 https://pic1.zhimg.com/v2-f39a4d5347f1e9b315b78f295249e979_r.jpg?source=1940ef5c    // polar(config) {    //     let dv = new DataView().source(this.state.data);    //     console.log(dv);    //     dv.transform({    //         type  : 'fold',    //         fields: [ config.genre ],    //         key   : 'user',    //         value : 'score',    //     });    //     console.log(dv);    //     return <Chart    //         height={ config.height }    //         data={ dv.rows }    //         autoFit    //         scale={ {    //             score: {    //                 min: 0,    //                 max: Infinity,    //             },    //         } }    //         interactions={ [ 'legend-highlight' ] }    //     >    //         <Coordinate type="polar" radius={ 0.8 }/>    //         {/*<Tooltip shared />*/ }    //         <Point    //             position={ config.genre + '*sorce' }    //             color={ 'user' }    //             shape="circle"    //         />    //         <Line    //             position={ config.genre + '*sorce' }    //             color={ 'user' }    //             size="2"    //         />    //         <Area    //             position={ config.genre + '*sorce' }    //             color={ 'user' }    //         />    //     </Chart>;    // }    formatConfig() {        console.log(this.props.dataset);        let {            xaxis: genre,            series,            size,            colors,            title,            category,            type,        } = this.props.dataset;        let compare = series[0][0];        let genreName = series[0][1];       // 地区        let chartType = type || series[0][2];        return {            genre,           // 'location' (地区)            compare,         // 'count'  (数量)            category,            // 多维度统计            position: `${ genre }*${ compare }`,            colors  : colors,            genreName,       // `按照${genreName('地区')}统计的维度`            title,            height  : size.height,            chartType,        };    }    renderChart(config) {        switch (config.chartType) {            case 'bar':                return this.bar(config);            case 'line':                return this.line(config);            case  'pie':                return this.pie(config);            default:                return this.bar(config);        }    }    render() {        let config = this.formatConfig();        return <>            <h2 hidden={ !this.props.dataset.title }                style={ { textAlign: 'center', padding: '10px 20px' } }>{ this.props.dataset.title }</h2>            { this.renderChart(config) }        </>;    }}