/** * Created by WebStorm. * User: MacBook * Date: 2020/11/11 * Time: 2:36 下午 */import * as React from 'react';import { Component, ReactNode } from 'react';import { IComponentProps } from '@interface/common/component';import { Button, Menu } from 'antd';import { MailOutlined, MenuFoldOutlined, MenuUnfoldOutlined, PieChartOutlined } from '@ant-design/icons';import SubMenu from 'antd/lib/menu/SubMenu';import { jsonp } from '@utils/request/request';export default class LayoutMenu2 extends Component<IComponentProps, ReactNode> {    state = {        collapsed: false,        url      : '',        menulist : [],    };    constructor(props) {        super(props);        this.getData().then(menulist => {            console.log(menulist);            this.setState({ menulist });        });    }    async getData(): Promise<Array<any>> {        let { url, menulist } = this.props.dataset;        if (url) {            let res = await jsonp(url);            return res.status ? res.data : [];        } else {            return menulist;        }    }    toggleCollapsed = () => {        this.setState({            collapsed: !this.state.collapsed,        });    };    handleSelectMenu(e) {        window.location.href = e.item.props['data-path'];    }    render() {        return (            <div style={ { width: this.props.dataset.width || 200, height: '100vh', background: '#fff' } }>                <Button type="primary" onClick={ this.toggleCollapsed } style={ { marginBottom: 16 } }>                    { React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined) }                </Button>                <Menu                    defaultSelectedKeys={ [ '1' ] }                    defaultOpenKeys={ [ 'sub1' ] }                    mode="inline"       /* 'vertical' : 'inline': 'horizontal */                    theme={ 'light' }                    onClick={ this.handleSelectMenu.bind(this) }                    inlineCollapsed={ this.state.collapsed }                >                    {                        this.props.dataset.menulist.map((item, index) => {                            let children = item.children;                            if (children && children.length > 0) {                                return <SubMenu data-path={ item.path }                                                key={ 'parent-' + index }                                                icon={ <MailOutlined/> }                                                title={ item.name }>                                    { children.map(((child, i) => {                                        return <Menu.Item data-path={ child.path } key={ item.id || 'child-' + i }>                                            { child.name }                                        </Menu.Item>;                                    })) }                                </SubMenu>;                            } else {                                return <Menu.Item mode={ 'horizontal' } key={ item.id || 'child-' + index }                                                  data-path={ item.path }                                                  icon={ <PieChartOutlined/> }>                                    { item.name }                                </Menu.Item>;                            }                        })                    }                </Menu>            </div>        );        ;    }}