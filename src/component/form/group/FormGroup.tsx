/** * Created by WebStorm. * User: MacBook * Date: 2020/12/25 * Time: 5:30 下午 */import { Button, Form, Input, Space } from 'antd';import { MinusCircleOutlined, PlusCircleOutlined, PlusOutlined } from '@ant-design/icons';import React, { Component, ReactNode } from 'react';import { IComponentProps } from '@interface/common/component';import App from '@src/App';import style from './FormGroup.scss';export default class FormGroup extends Component<IComponentProps, any> {    state = {        formList: [] as Array<ReactNode>,    };    elements: Array<HTMLElement> = [];    count = 0;    constructor(props) {        super(props);        FormGroup.getPropertyByElement(this.props.el).then(elements => {            this.elements = elements;            this.addGroup();        });    }    addGroup() {        let formList = this.state.formList;        let node = this.renderFormItem();        formList.push(node);        this.setState({ formList });    }    renderFormItem(elements = this.elements): ReactNode {        let cloneElements = elements.map(el => el.cloneNode(true));     // 深拷贝DOM元素,避免出现组件重复问题        return <li key={ this.count++ } className={ `form-group-item ${ style.formItem }` }                   ref={ element => {                       if (element) {                           element.append(...cloneElements);                           new App(element, true);                       }                   } }>            <PlusCircleOutlined className={ style.addIcon } onClick={ e => this.handleAddGroup(e) }/>        </li>;    }    // 根据 element 元素获取组件配置    public static async getPropertyByElement(formGroup: HTMLElement) {        let $inputs = [ ...$(formGroup).children('[name][data-fn]') ];        let elements: Array<HTMLElement> = [];        for (const input of $inputs) {            let element = input.cloneNode(true) as HTMLElement;            input.remove();            elements.push(element);        }        return elements;    }    handleFinsh(values) {        console.log('Received values of form:', values);    };    handleAddGroup(e) {        this.addGroup();    }    render() {        console.log(this.state);        return <ul className="form-group">            { this.state.formList.map(node => node) }        </ul>;    }}