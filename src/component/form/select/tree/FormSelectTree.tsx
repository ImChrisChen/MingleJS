/** * Created by WebStorm. * User: chrischen * Date: 2020/9/20 * Time: 4:07 上午 */import React from 'react';import { Form, TreeSelect } from 'antd';import { IComponentProps } from '@interface/common/component';import { jsonp } from '@utils/request/request';import { formatTreeKey } from '@utils/format-data';import { Component } from 'react';import { FormSmartIcon } from '@component/form/form-action/FormAction';const { SHOW_PARENT } = TreeSelect;const treeData = [    {        title   : 'Node1',        value   : '0-0',        key     : '0-0',        children: [            {                title: 'Child Node1',                value: '0-0-0',                key  : '0-0-0',            },        ],    },    {        title   : 'Node2',        value   : '0-1',        key     : '0-1',        children: [            {                title: 'Child Node3',                value: '0-1-0',                key  : '0-1-0',            },            {                title: 'Child Node4',                value: '0-1-1',                key  : '0-1-1',            },            {                title: 'Child Node5',                value: '0-1-2',                key  : '0-1-2',            },        ],    },];export default class FormSelectTree extends Component<IComponentProps, any> {    state = {        options: [] as Array<any>,    };    constructor(props) {        super(props);        this.getData().then(options => {            this.setState({ options });        });    }    onChange = value => {        console.log('onChange ', value);        this.setState({ value });    };    async getData(): Promise<Array<any>> {        // let url = `http://e.local.aidalan.com/option/game/publisher?pf=0`;        let { url, key, value, children } = this.props.dataset;        if (url) {            let res = await jsonp(url);            let data = res.status ? res.data : [];            data = formatTreeKey(data, {                id      : key,                name    : value,                pid     : '',                children: children,            }, {                id      : 'key',                pid     : '',                name    : 'title',                children: 'children',            });            return data;        } else {            return treeData;        }    }    render() {        const tProps = {            treeData           : this.state.options,            onChange           : this.onChange,            treeCheckable      : true,            showCheckedStrategy: SHOW_PARENT,            placeholder        : 'Please select',            style              : {                width: '300px',            },        };        let { smart, ...dataset } = this.props.dataset;        return <>            <Form.Item label={ this.props.dataset.label }>                { smart ? <FormSmartIcon/> : '' }                <TreeSelect { ...dataset } { ...tProps } />            </Form.Item>        </>;    }}