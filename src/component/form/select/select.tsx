/** * Created by WebStorm. * User: chrischen * Date: 2020/9/15 * Time: 11:56 ‰∏ãÂçà */import './select.less'import * as React from "react";import { Checkbox, Divider, Select, Typography } from "antd";const { Option } = Select;const { Title } = Typographyinterface ISelectState {    theme: string,    options: Array<any>    [propsName: string]: any}export default class Selector extends React.Component<any, any> {    state: ISelectState = {        theme  : 'light',        options: [],        value  : []    }    constructor(props) {        super(props);        for(let i = 0; i < 100; i++) {            const value = `${ i.toString(36) }${ i }`;            this.state.options.push({                value,                disabled: i === 10,            });        }    }    public handleChange(value, object) {        let { el } = this.props;        el.value = value;        console.log(value, this.state.value);        // let arr = JSON.parse(JSON.stringify(this.state.value));        //        // if(arr.includes[value[0]]) {        //     let index = arr.findIndex(item => value[0]);        //     arr.splice(index, 1);        //     this.setState({ value: arr })        // } else {        //     arr.push(...value);        //     this.setState({ value: arr })        // }        if(el.onchange) {            (el.onchange as Function)()        }    }    handleSearch() {    }    handleFocus() {    }    handleBlur() {    }    handleChangeTheme() {    }    handleSelectAll(e) {        let v = e.target.checked;        if(v) {            let value = this.state.options.map(item => item.value);            this.setState({ value })        } else {            this.setState({ value: [] })        }    }    componentDidMount() {        let hooks = this.props.el.getAttribute('data-onload');        if(window[hooks]) {            (window[hooks] as any)();        }    }    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any) {    }    render() {        return <div onMouseDown={ e => e.preventDefault() /*(ÂçïÈÄâÊ®°Âºè)ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°ÔºåËß£ÂÜ≥ÈÄâÊã©‰∏ÄÊ¨°‰∏ãÊãâÂ∞±Êî∂Âõû‰∏ãÊãâÂàóË°®ÁöÑÈóÆÈ¢ò*/ }>            <Checkbox onChange={ this.handleSelectAll.bind(this) }/>            <Select                showSearch                style={ { width: 200 } }                placeholder="Select a person"                mode="multiple"                allowClear={ true }                defaultValue={ this.state.value }                maxTagCount={ 1 }                menuItemSelectedIcon={ <div>üòÑ</div> }                optionFilterProp="children"                onChange={ this.handleChange.bind(this) }                onSearch={ this.handleSearch.bind(this) }                onFocus={ this.handleFocus.bind(this) }                options={ this.state.options }                onBlur={ this.handleBlur.bind(this) }                filterOption={ (input, option: any) =>                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0                }                // dropdownRender={ menu => (                //     <div>                //         { menu }                //         <Divider style={ { margin: '2px 0' } }/>,                //         <div style={ { padding: '4px 8px 8px 8px', cursor: 'pointer' } }>,                //             <Checkbox>ÂÖ®ÈÄâ</Checkbox>                //             <button className="expandBtn" style={ { marginLeft: "37%", marginRight: 10 } }>Á°ÆÂÆö</button>                //             <button className="expandBtn" style={ { marginLeft: 10 } }>ÂèñÊ∂à</button>                //         </div>                //     </div>                // ) }            >                {/*<Option value="jack">Jack</Option>*/ }                {/*<Option value="lucy">Lucy</Option>*/ }                {/*<Option value="tom">Tom</Option>*/ }                {/*<Option value="bob">Bob</Option>*/ }                {/*<Option value="chris">Chris</Option>*/ }                {/*<Option value="dony">Dony</Option>*/ }            </Select>,            <Divider/>        </div>    }}