import React from 'react';import { render } from 'react-dom';import { getComponent } from '@utils/relation-map';import { ElementDataAttrs } from '@interface/ElAttrs';import { parseDataAttr } from '@utils/parse-data-attr';export default class App {    private elements;    private modules: Array<any> = [];    constructor() {        this.init().then(() => this.render());    }    async init() {        this.elements = document.querySelectorAll(`[data-fn]`);        for(const element of this.elements) {            let container;            if(element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {                container = document.createElement('div') as HTMLDivElement;                (element as HTMLInputElement).after(container);            } else {                container = element as HTMLDivElement;            }            element.setAttribute('type', 'hidden');            let componentNames = element.getAttribute('data-fn') ?? '';            for(const componentName of componentNames.split(' ')) {                console.log(componentName);                if(componentName.startsWith('self-')) {                    console.error(`${ componentName } 模块不属于MingleJS`);                } else {                    let Component = await getComponent(componentName);                    this.modules.push({ Component, element, container });                }            }        }    }    async render() {        this.modules.forEach(module => {            let { element, Component, container } = module;            let dataset: ElementDataAttrs = (element as (HTMLInputElement | HTMLDivElement)).dataset;            // 组件名必须大写            render(<Component el={ element } { ...parseDataAttr(dataset) }/>, container);            this.eventListener(module);        });    }    eventListener(module) {        let { element, Component, container } = module;        // https://developer.mozilla.org/zh-CN/docs/Web/Events#%E5%8F%82%E8%A7%81        if(element.tagName === 'INPUT') {            element['onchange'] = function (e) {                console.log('input值变化重新触发 解析模块');                let dataset: ElementDataAttrs = (element as (HTMLInputElement | HTMLDivElement)).dataset;                render(<Component el={ element } { ...parseDataAttr(dataset) }/>, container);            };        }        element.addEventListener('DOMNodeInserted', function () {            console.log('DOMNodeInserted');        });        element.addEventListener('DOMNodeRemoved', function () {            console.log('DOMNodeRemoved');        });        element.addEventListener('DOMNodeRemoved', function () {            console.log('DOMNodeRemoved');        });        element.addEventListener('DOMAttrModified', function () {            console.log('DOMAttrModified');        });        element.addEventListener('DOMAttributeNameChanged', function () {            console.log('DOMAttributeNameChanged');        });        element.addEventListener('DOMElementNameChanged ', function () {            console.log('DOMElementNameChanged');        });        element.addEventListener('DOMSubtreeModified', function () {            console.log('DOMSubtreeModified');        });    }}