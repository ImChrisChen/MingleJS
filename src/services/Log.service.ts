/** * Created by WebStorm. * User: MacBook * Date: 2020/9/18 * Time: 1:09 下午 */import "reflect-metadata";import { Inject } from "typescript-ioc"; // https://www.npmjs.com/package/typescript-ioc// 存放所有可以被作为依赖项的类const classPool: Array<Function> = [];// 标记可被注入类export function injectable(_constructor: Function) {    // 通过反射机制，获取参数类型列表    let paramsTypes: Array<Function> = Reflect.getMetadata('design:paramtypes', _constructor);    if (classPool.indexOf(_constructor) !== -1) {        return;    } else if (paramsTypes.length) {        paramsTypes.forEach((v, i) => {            console.log(v);            if (v === _constructor) {                throw new Error('不可以依赖自身');            } else if (classPool.indexOf(v) === -1) {                throw new Error(`依赖${ i }[${ (v as any).name }]不可被注入`);            }        });    }    classPool.push(_constructor);}export class LogService {    constructor() {        console.log('LogServer');    }    public debug(...args: any[]): void {        console.log('loginService.debug')    }}class Demo {    constructor(@Inject private readonly logService: LogService) {        this.logService.debug()    }}